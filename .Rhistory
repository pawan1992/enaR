library(enaR)
data(bgcModels)
x <- bgcModels$'Models$Sylt-Romo Bight (P)'
x
names(bgcModels)
x <- bgcModels[[43]]
x <- bgcModels[[42]]
x
balanc(x)
balance(x)
y <- balance(x)
y
ssCheck(y)
ssCheck(x)
ssCheck(bgcModels[[41]])
ssCheck(bgcModels[[42]])
ssCheck(x)
ssCheck(y)
balance(x)
force
?force
 y <- force.balance(x)
ssCheck(y)
stor.check <- enaStorage(y)
stor.check$ns
y
y%v%input
y%n%input
y%n%'input'
y%v%'input'
y%v%'export'
y%v%'respiration'
sum(y%v%'input')
sum(y%v%'export')
v.input <- lapply(bgcModels,function(x) var(x%v%'input'))
v.export <- lapply(bgcModels,function(x) var(x%v%'export'))
v.input <- unlist(lapply(bgcModels,function(x) var(x%v%'input')))
v.export <- unlist(lapply(bgcModels,function(x) var(x%v%'export')))
v.input
v.export
plot(v.input)
die <- unlist(lapply(bgcModels,function(x) sum(x%v%'input')-sum(x%v%'export'))
)
die <- unlist(lapply(bgcModels,function(x) sum(x%v%'input')-sum(x%v%'export')))
die
plot(die)
x
y
y%v%'input'
apply(y%v%'flow',1,sum)
apply(y%n%'flow',1,sum)
apply(y%n%'flow',2,sum)
frs <- apply(y%n%'flow',1,sum)
fcs <- apply(y%n%'flow',2,sum)
frs-y%v%'input'
image(y%n%'flow')
plot(y)
plot(x)
x-y
dxy <- x%n%'flow'-y%n%'flow'
dxy
gplot(abs(dxy))
balance.override=FALSE
x <- y
F
stor
I
dt
P
sign(-1)
sign(1)
sign(0)
sign(-2)
Q
sign(Q)
P
sign(P)
sum(sign(P))
sum(sign(Q))
x <- bgcModels[[41]]
x
P
Q
P
sign(P)
sum(sign(P))
sum(sign(Q)
)
I
I-P
hist(I-P)
x <- y
hist(I-P)
P
Q
test.Q <- function(x){
    F <- t(x%n%'flow') #flows
                                        #continue unpacking
    input <- x%v%'input' #inputs
    stor <- x%v%'storage' #storage values
    T <- apply(F,1,sum) + input
    FD <- F - diag(T) #flow matrix with negative throughflows on the diagonal
    I <- diag(1,nrow(F),ncol(F)) #create the identity matrix

                                        #Compute the Jacobian matrix
    C <- FD %*% ginv(diag(stor)) #output matrix
    CP <- ginv(diag(stor)) %*% FD #input matrix
    
                                        #smallest whole number to make diag(C) nonnegative
    dt <- -1 / floor(min(diag(C)))

                                        #calculating the storage-specific, output-oriented, intercompartmental flows (P)
    P <- I + C*dt
    PP <- I + CP*dt
                                        #calculating the dimensionalized integral output and input matrices
    S <- -ginv(C) #output
    SP <- -ginv(CP) #input

                                        #calculating the integral storage intensity matrix (Q)
    Q <- ginv(I - P) #output
return(sum(sign(Q)))
}
test.Q(y)
lapply(bgcModels,test.Q)
unlist(lapply(bgcModels,test.Q))
hist(unlist(lapply(bgcModels,test.Q)))
table(unlist(lapply(bgcModels,test.Q)))
test.Q <- function(x){
    F <- t(x%n%'flow') #flows
                                        #continue unpacking
    input <- x%v%'input' #inputs
    stor <- x%v%'storage' #storage values
    T <- apply(F,1,sum) + input
    FD <- F - diag(T) #flow matrix with negative throughflows on the diagonal
    I <- diag(1,nrow(F),ncol(F)) #create the identity matrix

                                        #Compute the Jacobian matrix
    C <- FD %*% ginv(diag(stor)) #output matrix
    CP <- ginv(diag(stor)) %*% FD #input matrix
    
                                        #smallest whole number to make diag(C) nonnegative
    dt <- -1 / floor(min(diag(C)))

                                        #calculating the storage-specific, output-oriented, intercompartmental flows (P)
    P <- I + C*dt
    PP <- I + CP*dt
                                        #calculating the dimensionalized integral output and input matrices
    S <- -ginv(C) #output
    SP <- -ginv(CP) #input

                                        #calculating the integral storage intensity matrix (Q)
    Q <- ginv(I - P) #output
return(any(sign(Q)<0))
}
unlist(lapply(bgcModels,test.Q))
sign(unlist(lapply(bgcModels,test.Q)))
sign(unlist(lapply(bgcModels,ssCheck)))
sign(unlist(lapply(bgcModels,test.Q)))==sign(unlist(lapply(bgcModels,ssCheck)))
sign(sign(unlist(lapply(bgcModels,test.Q)))==sign(unlist(lapply(bgcModels,ssCheck))))
sign(sign(unlist(lapply(bgcModels,test.Q)))!=sign(unlist(lapply(bgcModels,ssCheck))))
bbgc <- lapply(bgcModels,force.balance)
qcheck <- sign(unlist(lapply(bbgc,test.Q)))
qcheck
bcheck <- sign(unlist(lapply(bgcModels,ssCheck)))
bcheck
qcheck!=bcheck
q()
n
